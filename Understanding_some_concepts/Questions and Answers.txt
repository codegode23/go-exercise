
1. Make a program that lets the user input a name
2. Get a number from the console and check if it’s between 1 and 10.

Answer
package main

import (
    "bufio"
    "fmt"
    "os"
    "strconv"
    "strings"
)

func main() {
    reader := bufio.NewReader(os.Stdin)

    fmt.Print("Enter a number: ")
    str1, _ := reader.ReadString('\n')

    // remove newline
    str1 = strings.Replace(str1,"\n","",-1)

    // convert string variable to int variable
    num, e := strconv.Atoi(str1)
    if e != nil {
    fmt.Println("conversion error:", str1)
    }

    if num >= 1 && num <= 10 {
    fmt.Println("correct")
    } else {
        fmt.Println("num not in range")
    }
}

STRINGS

golang strings can be seen as a collection of characters. 
A string can be of length 1 (one character), but its usually longer. 
A string is always written in double qoutes.

To join strings, you can use the package strings which has the method .Join().

package main

import (
	"fmt"
	"strings"
)

func main() {
	s := strings.Join([]string{"hello", "world"}, ": ")
	fmt.Println(s)
}


SCOPES

Scope is where a variable can be used.

What’s the difference between a local and global variable?

A variable defined in the function is called a local variable. 
Their scope is only in the function body, that means they only exist within their function.

A variable defined outside the local scope is called a global variable. 
Global variables can be used throughout the package or even the external package (after export).

A variable in the function definition is called parameter



ARRAYS

An array is a set of numbered and length-fixed data item sequences that have the same unique type

This type can be any primitive type such as:

    integer
    string
    custom type

The array length must be a constant expression and must be a non-negative integer.

An array in the Go language is a type of value (not a pointer to the first element in C/C++), so it can be created by new():

var arr1 = new([5]int)

The array element can be read (or modified) by an index (position), the index starts from 0, 
the first element index is 0, the second index is 1, and so on.

fmt.Println(arr1[0]) // output first element

//Create an array with the number 0 to 10
//Create an array of strings with names

package main

import "fmt"

func main() {
	var a = []int64{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
	var names = []string{"Jasper", "Kojo", "Akabua"}

	b := len(a)

	fmt.Println(b)
	fmt.Println(names)
}


// Looping through an array
package main

import (
	"fmt"
)

func main() {
	// define array
	a := []int{1, 2, 3, 4, 5, 6}

	// loop over array
	for i := 0; i < len(a); i = i + 1 {
		fmt.Println("character :", a[i])
	}

	for b := 1; b < 11; b++ {
		fmt.Println(b)
	}
}


RANGE

Range iterates over elements. That can be elements of an array, elements of a dictionary or other data structures.

When using range, you can name the current element and current index: for i, num := range nums {.

But you are free to ignore the index: for _, num := range nums {.


package main

import "fmt"

func main() {
	nums := []int{1, 2, 3, 4, 5, 6}

	for _, num := range nums {
		fmt.Println(num)
	}

	var a = []int64{1, 2, 3, 4}

	for index, element := range a {
		fmt.Print(index, ") ", element, "\n")
	}
}



// Make a program that divides x by 2 if it’s greater than 0

package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
)

func main() {
	reader := bufio.NewReader(os.Stdin)

	fmt.Print("Enter a number: ")
	str1, _ := reader.ReadString('\n')

	str1 = strings.Replace(str1, "\n", "", -1)

	var x int

	// convert string variable to int variable
	num, e := strconv.Atoi(str1)
	if e != nil {
		fmt.Println("conversion error:", str1)
	}

	if num > 0 {
		x = num / 2
	} else {
		fmt.Println("Number is less than 0")
	}

	fmt.Println(x)
}


FILES

The following golang code will check if the specified file exists or not.

package main

import (
	"fmt"
	"os"
)

func main() {

	if _, err := os.Stat("Questions and Answers.txt"); err == nil {
		fmt.Printf("File exists\n")
	} else {
        
		fmt.Printf("File does not exist\n")
	}
}


STRUCT

A struct can bundle attributes together. If you create a struct,
you can set a couple of variables for that struct. Those variables can be of any datatype.

A key difference from an array is that elements of an array are all of the same datatype.
That is not the case with a struct.

If you want to combine variables, structs are the way to go. Unlike the concept of object
oriented programming, they are just data holders.