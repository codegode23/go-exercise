What Is an API?

An Application Programming Interface (API) defines the allowed interactions between
two pieces of software, just like a User Interface defines the ways
in which a user can interact with a program.

Goroutines again

A goroutine is a function that runs concurrently with certain other goroutines;
it is a lightweight thread. Using the channel operator, we can transport values
through channels. As a result, a channel provides a way for the goroutine to 
communicate with one another without using locks. The channel is bidirectional, 
meaning that data can be sent and received through the same channel.

Reference: https://www.scaler.com/topics/golang/goroutines/

package main

import (
    "fmt"
)

func hell() {                    //creating a goroutine
    fmt.Println("Hello world!!")
}

func main() {
    go hell()                   //calling a goroutine
    time.Sleep(1 * time.Second)    //making the main goroutine sleep for 1 second
    fmt.Println("Welcome user!! You are currently in the main function.")
}

Result: Hello, world!!
        Welcome, user!! You are currently in the main function.

In the above code, we used the method time.sleep(1 * time.Second)
to make the main goroutine sleep for a second so that the goroutine
hell() gets some time to execute.

Result without the time.sleep method: Welcome, user!! You are currently in the main function.


Starting Multiple Goroutines

Let us consider an example in which we start two goroutines.

package main

import (
	"fmt"
	"time"
)

func number() {                    //creating a goroutine
	for i := 1; i <= 5; i++ {
		time.Sleep(400 * time.Millisecond)    //making the goroutine sleep for 400 milliseconds
		fmt.Printf("%d ", i)
	}
}

func alphabet() {                  //creating a goroutine
	for i := 'a'; i <= 'g'; i++ {
		time.Sleep(500 * time.Millisecond)    //making the goroutine sleep for 500 milliseconds
		fmt.Printf("%c ", i)
	}
}

func main() {
	go number()            //calling a goroutine
	go alphabet()          //calling a goroutine
	time.Sleep(9000 * time.Millisecond)        //making the main goroutine sleep for 9000 milliseconds
	fmt.Println("\nProgram terminated!!")
}

Output:

1 a 2 b 3 4 c 5 d e f g 
Program terminated!!

Both the goroutines number and alphabet run concurrently. The goroutine number initially sleeps for 400 milliseconds
and then executes the number 1 then sleeps again and executes number 2 and so on. Similarly, the goroutine alphabet
sleeps initially for 500 milliseconds and executes a then sleeps again then executes b, and so on. The main goroutine
executes both the goroutines number and alphabet and sleeps for 9000 milliseconds and then it terminates.


Reference: https://www.scaler.com/topics/golang/goroutines/



Channels

In the Golang, a channel acts as a medium through which goroutine communicates
with each other with a lock-free mode of communication. It is a technique in golang
that allows one goroutine to exchange data or to communicate with another goroutine
and hence it is known as a channel.

package main
import "fmt"

// Prints a greeting message using values received in
// the channel
func greet(c chan string) {

	name := <- c	// receiving value from channel
	fmt.Println("Hello", name)
}

func main() {

	// Making a channel of value type string
	c := make(chan string)

	// Starting a concurrent goroutine
	go greet(c)

	// Sending values to the channel c
	c <- "World"

	// Closing channel
	close(c)
}

Result: Hello World

The first step is to make a channel with a type string and function start with greet as a goroutine.
// Making a channel of value type string
	c := make(chan string)

The greet function is blocked when <- c is encountered and it waits to receive a value.

The main function of the goroutine is to send value to the channel that the greet function prints when received



TYPES OF CHANNELS

There are two types of channels available in golang according to the behavior of data exchange:

Unbuffered channel- it is used for performing synchronous communication
between a buffered channel as well as goroutines.

Buffered channel- it is used for performing asynchronous communication.
Here is a code block that creates buffered and unbuffered channels:

Unbuffered := make(chan int) // Unbuffered channel of integer type

buffered := make(chan int, 10)	// Buffered channel of integer type
